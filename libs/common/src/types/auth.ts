// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from 'google/protobuf/timestamp';

export const protobufPackage = 'user';

export interface permission {
  id: string;
  permission: string;
  action: string;
  object: string;
  possession: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface role {
  id: string;
  role: string;
  permissions: permission[];
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface user {
  id: string;
  username: string;
  email: string;
  profileImage: string;
  isVerified: boolean;
  role: role | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetUserRequest {
  id: string;
}

export interface permissionResponse {
  permissions: permission[];
}

export const USER_PACKAGE_NAME = 'user';

export interface UsersServiceClient {
  getUser(request: GetUserRequest): Observable<user>;

  getUserRoles(request: GetUserRequest): Observable<role>;

  getUserPermissions(request: GetUserRequest): Observable<permissionResponse>;
}

export interface UsersServiceController {
  getUser(request: GetUserRequest): Promise<user> | Observable<user> | user;

  getUserRoles(
    request: GetUserRequest,
  ): Promise<role> | Observable<role> | role;

  getUserPermissions(
    request: GetUserRequest,
  ):
    | Promise<permissionResponse>
    | Observable<permissionResponse>
    | permissionResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getUser',
      'getUserRoles',
      'getUserPermissions',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UsersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UsersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USERS_SERVICE_NAME = 'UsersService';
